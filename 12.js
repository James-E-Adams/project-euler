/*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

/*
Optimisations:
- only go until sqrt(number) https://www.rookieslab.com/posts/most-efficient-way-to-find-all-factors-of-a-number-python-cpp

Failed optimisations:
- using previous runs to know where to start from - didn't actually save that much time
*/

function doStuff(max) {
  //outer loop finds each triangle number by adding the next integer.
  let runningSum = 0;
  for (i = 1; i < max; i++) {
    runningSum += i;

    //Find factors

    let factors = [];

    for (let j = 1; j <= Math.sqrt(runningSum); j++) {
      if (runningSum % j === 0) {
        factors.push(j, runningSum / j);
      }
    }

    if (factors.length > 500) {
      //Found it!
      console.log(
        `The factors of the ${i}th triangle number, ${runningSum}, are ${factors}. There are ${factors.length} factors. `
      );
      return;
    }
  }
}

doStuff(100000);
